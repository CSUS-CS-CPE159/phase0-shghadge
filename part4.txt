-[spede] ~/csc239/phase0-shghadge/02-debugging {main *%=}
16:27:42 $ spede-target 
Launching SPEDE target to run in the background
-[spede] ~/csc239/phase0-shghadge/02-debugging {main *%=}
16:31:16 $ make
Done linking "build/MyOS.dli" (with GDB enabled) at 1m.
-[spede] ~/csc239/phase0-shghadge/02-debugging {main *%=}
16:31:19 $ 
-[spede] ~/csc239/phase0-shghadge/02-debugging {main *%=}
16:31:20 $ spede-run -d
The SPEDE Target will be reset, are you sure? (y/n) y
Resetting the SPEDE Target...
Downloading image 'build/MyOS.dli' to SPEDE Target via /dev/pts/2...
File type is 'ELF'
Total blocks to download:  0x83  (128 bytes each)

Load Successful ; Code loaded at 0x0x101000 (2404 bytes/sec)
Executing the image 'build/MyOS.dli' on the SPEDE Target with GDB Enabled
Launching GDB...
Reading symbols from build/MyOS.dli...
Expanding full symbols from build/MyOS.dli...
Remote debugging using /dev/pts/2
0x00102685 in breakpoint ()
Temporary breakpoint 1 at 0x101206: file src/main.c, line 40.

Temporary breakpoint 1, main () at src/main.c:40
40	    char buf[128] = {0};
SPEDE GDB$ break puts
Breakpoint 2 at 0x10119b: file src/main.c, line 24.
SPEDE GDB$ info break
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x0010119b in puts at src/main.c:24
SPEDE GDB$ continue
Continuing.
Hello, world!
Welcome to MyOS!

Breakpoint 2, puts (str=0x10422f "Hello, World!\n") at src/main.c:24
24	    if (str) {
SPEDE GDB$ continue
Continuing.
NULL pointer!
The buffer size is 17 bytes

Breakpoint 2, puts (str=0x10dfc "welcome to MyOS!\n") at src/main.c:24
24	    if (str) {
SPEDE GDB$ continue
Continuing.
NULL pointer!
CPE/CSC 159 for Spring/Fall 1970 will be fun!
[Inferior 1 (Remote target) exited normally]
SPEDE GDB$ exit
-[spede] ~/csc239/phase0-shghadge/02-debugging {main *%=}
16:33:40 $ spede-run -d
The SPEDE Target will be reset, are you sure? (y/n) y
Resetting the SPEDE Target...
Downloading image 'build/MyOS.dli' to SPEDE Target via /dev/pts/2...
File type is 'ELF'
Total blocks to download:  0x83  (128 bytes each)

Load Successful ; Code loaded at 0x0x101000 (3366 bytes/sec)
Executing the image 'build/MyOS.dli' on the SPEDE Target with GDB Enabled
Launching GDB...
Reading symbols from build/MyOS.dli...
Expanding full symbols from build/MyOS.dli...
Remote debugging using /dev/pts/2
0x00102685 in breakpoint ()
Temporary breakpoint 1 at 0x101206: file src/main.c, line 40.

Temporary breakpoint 1, main () at src/main.c:40
40	    char buf[128] = {0};
SPEDE GDB$ break puts
Breakpoint 2 at 0x10119b: file src/main.c, line 24.
SPEDE GDB$ list
35	
36	/**
37	 * Main function
38	 */
39	void main(void) {
40	    char buf[128] = {0};
41	    int year = 1970;
42	
43	    *((char *) 0xB8000) = 'A';
44	
SPEDE GDB$ continue
Continuing.
Hello, world!
Welcome to MyOS!

Breakpoint 2, puts (str=0x10422f "Hello, World!\n") at src/main.c:24
24	    if (str) {
SPEDE GDB$ list
19	/**
20	 * Prints a string to the screen starting at 0, 0
21	 * @param str pointer to the string to print
22	 */
23	void puts(char *str) {
24	    if (str) {
25	        printf("NULL pointer!\n");
26	        return;
27	    }
28	
SPEDE GDB$ print str
$1 = 0x10422f "Hello, World!\n"
SPEDE GDB$ stepp
This command can only be used in a tracepoint actions list.
SPEDE GDB$ step
25	        printf("NULL pointer!\n");
SPEDE GDB$ step
NULL pointer!
26	        return;
SPEDE GDB$ continue
Continuing.
The buffer size is 17 bytes

Breakpoint 2, puts (str=0x10dfc "welcome to MyOS!\n") at src/main.c:24
24	    if (str) {
SPEDE GDB$ jump +3
Continuing at 0x1011b3.
CPE/CSC 159 for Spring/Fall 1970 will be fun!
[Inferior 1 (Remote target) exited normally]
SPEDE GDB$ continue
The program is not being run.
SPEDE GDB$ exit
-[spede] ~/csc239/phase0-shghadge/02-debugging {main *%=}
16:37:50 $ spede-run -d
The SPEDE Target will be reset, are you sure? (y/n) y
Resetting the SPEDE Target...
Downloading image 'build/MyOS.dli' to SPEDE Target via /dev/pts/2...
File type is 'ELF'
Total blocks to download:  0x83  (128 bytes each)

Load Successful ; Code loaded at 0x0x101000 (3366 bytes/sec)
Executing the image 'build/MyOS.dli' on the SPEDE Target with GDB Enabled
Launching GDB...
Reading symbols from build/MyOS.dli...
Expanding full symbols from build/MyOS.dli...
Remote debugging using /dev/pts/2
0x00102685 in breakpoint ()
Temporary breakpoint 1 at 0x101206: file src/main.c, line 40.

Temporary breakpoint 1, main () at src/main.c:40
warning: Source file is more recent than executable.
40	    char buf[128] = {0};
SPEDE GDB$ break strlen
Breakpoint 2 at 0x101178: file src/main.c, line 9.
SPEDE GDB$ info break
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x00101178 in strlen at src/main.c:9
SPEDE GDB$ 
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x00101178 in strlen at src/main.c:9
SPEDE GDB$ 
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x00101178 in strlen at src/main.c:9
SPEDE GDB$ 
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x00101178 in strlen at src/main.c:9
SPEDE GDB$ continue
Continuing.
Hello, world!
Welcome to MyOS!
NULL pointer!

Breakpoint 2, strlen (str=0x10dfc "welcome to MyOS!\n") at src/main.c:9
9	    int len = 0;
SPEDE GDB$ continue
Continuing.
The buffer size is 17 bytes
NULL pointer!
CPE/CSC 159 for Spring/Fall 1970 will be fun!
[Inferior 1 (Remote target) exited normally]
SPEDE GDB$ 
SPEDE GDB$ break
Note: breakpoint 2 also set at pc 0x101178.
Breakpoint 3 at 0x101178: file src/main.c, line 9.
SPEDE GDB$ exit
-[spede] ~/csc239/phase0-shghadge/02-debugging {main *%=}
16:41:20 $ spede-run -d
The SPEDE Target will be reset, are you sure? (y/n) ^C
![spede] ~/csc239/phase0-shghadge/02-debugging {main *%=}
16:41:26 $ ^C
![spede] ~/csc239/phase0-shghadge/02-debugging {main *%=}
16:41:26 $ spede-target
Launching SPEDE target to run in the background
-[spede] ~/csc239/phase0-shghadge/02-debugging {main *%=}
16:41:41 $ make
Done linking "build/MyOS.dli" (with GDB enabled) at 1m.
-[spede] ~/csc239/phase0-shghadge/02-debugging {main *%=}
16:41:43 $ spede-run -d
The SPEDE Target will be reset, are you sure? (y/n) y
Resetting the SPEDE Target...
Downloading image 'build/MyOS.dli' to SPEDE Target via /dev/pts/2...
File type is 'ELF'
Total blocks to download:  0x83  (128 bytes each)

Load Successful ; Code loaded at 0x0x101000 (2805 bytes/sec)
Executing the image 'build/MyOS.dli' on the SPEDE Target with GDB Enabled
Launching GDB...
Reading symbols from build/MyOS.dli...
Expanding full symbols from build/MyOS.dli...
Remote debugging using /dev/pts/2
0x00102685 in breakpoint ()
Temporary breakpoint 1 at 0x101206: file src/main.c, line 40.

Temporary breakpoint 1, main () at src/main.c:40
40	    char buf[128] = {0};
SPEDE GDB$ break strlen
Breakpoint 2 at 0x101178: file src/main.c, line 9.
SPEDE GDB$ info break
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x00101178 in strlen at src/main.c:9
SPEDE GDB$ continue
Continuing.
Hello, world!
Welcome to MyOS!

Breakpoint 2, strlen (str=0x10422f "Hello, World!\n") at src/main.c:9
9	    int len = 0;
SPEDE GDB$ bracktrace
Undefined command: "bracktrace".  Try "help".
SPEDE GDB$ backtrace
#0  strlen (str=0x10422f "Hello, World!\n") at src/main.c:9
#1  0x001011be in puts (str=0x10422f "Hello, World!\n") at src/main.c:29
#2  0x00101265 in main () at src/main.c:48
SPEDE GDB$ info args
str = 0x10422f "Hello, World!\n"
SPEDE GDB$ info break
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x00101178 in strlen at src/main.c:9
	breakpoint already hit 1 time
SPEDE GDB$ delete 2
SPEDE GDB$ info break
No breakpoints or watchpoints.
SPEDE GDB$ continue
Continuing.
The buffer size is 17 bytes
CPE/CSC 159 for Spring/Fall 1970 will be fun!
[Inferior 1 (Remote target) exited normally]
SPEDE GDB$ exit
-[spede] ~/csc239/phase0-shghadge/02-debugging {main *%=}
16:46:53 $ spede-run -d
The SPEDE Target will be reset, are you sure? (y/n) y
Resetting the SPEDE Target...
Downloading image 'build/MyOS.dli' to SPEDE Target via /dev/pts/2...
File type is 'ELF'
Total blocks to download:  0x83  (128 bytes each)

Load Successful ; Code loaded at 0x0x101000 (2805 bytes/sec)
Executing the image 'build/MyOS.dli' on the SPEDE Target with GDB Enabled
Launching GDB...
Reading symbols from build/MyOS.dli...
Expanding full symbols from build/MyOS.dli...
Remote debugging using /dev/pts/2
0x00102685 in breakpoint ()
Temporary breakpoint 1 at 0x101206: file src/main.c, line 40.

Temporary breakpoint 1, main () at src/main.c:40
40	    char buf[128] = {0};
SPEDE GDB$ 
SPEDE GDB$ 
SPEDE GDB$ 
SPEDE GDB$ 
SPEDE GDB$ 
SPEDE GDB$ break main.c:52
Breakpoint 2 at 0x1012a9: file src/main.c, line 52.
SPEDE GDB$ break main.c:54
Breakpoint 3 at 0x1012bb: file src/main.c, line 54.
SPEDE GDB$ 
Note: breakpoint 3 also set at pc 0x1012bb.
Breakpoint 4 at 0x1012bb: file src/main.c, line 54.
SPEDE GDB$ continue
Continuing.
Hello, world!
Welcome to MyOS!
The buffer size is 17 bytes

Breakpoint 2, main () at src/main.c:52
52	    puts(buf);
SPEDE GDB$ prin buf
Ambiguous command "prin buf": print, print-enum, print-object, printf.
SPEDE GDB$ print buf
$1 = "welcome to MyOS!\n", '\000' <repeats 110 times>
SPEDE GDB$ set buf[0]= 'W'
SPEDE GDB$ print buf
$2 = "Welcome to MyOS!\n", '\000' <repeats 110 times>
SPEDE GDB$ continue
Continuing.

Breakpoint 3, main () at src/main.c:54
54	    printf("CPE/CSC 159 for Spring/Fall %d will be fun!\n", year);
SPEDE GDB$ print year
$3 = 0x7b2
SPEDE GDB$ print /d year
$4 = 1970
SPEDE GDB$ 
$5 = 1970
SPEDE GDB$ 
$6 = 1970
SPEDE GDB$ set year=2025
SPEDE GDB$ print /d year
$7 = 8229
SPEDE GDB$ set year=2025.
SPEDE GDB$ print /d year
$8 = 2025
SPEDE GDB$ continue
Continuing.
CPE/CSC 159 for Spring/Fall 2025 will be fun!
[Inferior 1 (Remote target) exited normally]
SPEDE GDB$ 
